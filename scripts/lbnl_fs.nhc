# LBNL NHC - Filesystem Checks
#
# Michael Jennings <mej@lbl.gov>
# 15 December 2010
#

MOUNT_CMD="${MOUNT_CMD:-mount}"
DF_CMD="${DF_CMD:-df}"
DFI_CMD="${DFI_CMD:-${DF_CMD}}"
DF_FLAGS="${DF_FLAGS:--Tka}"
DFI_FLAGS="${DFI_FLAGS:--Tia}"

FS_DEV=( )
FS_MNTPT=( )
FS_TYPE=( )
FS_OPTS=( )
DF_DEV=( )
DF_TYPE=( )
DF_SIZE=( )
DF_USED=( )
DF_FREE=( )
DF_PCT=( )
DF_MNTPT=( )
DFI_DEV=( )
DFI_TYPE=( )
DFI_INODES=( )
DFI_IUSED=( )
DFI_IFREE=( )
DFI_PCT=( )
DFI_MNTPT=( )

function nhc_fs_mounts_gather_data() {
    local FS_CNT LINE FS i
    local -a FIELD

    if [[ ! -r /proc/mounts ]]; then
        return 1
    fi

    # Any filesystems passed as parameters should be actively
    # queried to force auto-mounting to take place.
    for FS in "$@" ; do
        read -a FIELD < $FS/NHC/non-existent/path/FILE.xxxx
    done &>/dev/null

    ((FS_CNT=0))
    while read -a FIELD ; do
        for ((i=0; i<$FS_CNT; i++)); do
            if [[ "${FS_MNTPT[$i]}" == "${FIELD[1]}" ]]; then
                FS_DEV[$i]="${FIELD[0]}"
                FS_TYPE[$i]="${FIELD[2]}"
                FS_OPTS[$i]="${FIELD[3]}"
                dbg "Overwrote filesystem at position $i with ${FS_DEV[$i]} ${FS_MNTPT[$i]} ${FS_TYPE[$i]} ${FS_OPTS[$i]}"
                continue 2
            fi
        done
        FS_DEV[$FS_CNT]="${FIELD[0]}"
        FS_MNTPT[$FS_CNT]="${FIELD[1]}"
        FS_TYPE[$FS_CNT]="${FIELD[2]}"
        FS_OPTS[$FS_CNT]="${FIELD[3]}"
        dbg "Got filesystem ${FS_DEV[$FS_CNT]} ${FS_MNTPT[$FS_CNT]} ${FS_TYPE[$FS_CNT]} ${FS_OPTS[$FS_CNT]}"
        ((FS_CNT++))
    done < /proc/mounts
    #set | grep ^FS_ | sed 's/\[/\n        [/g;s/)$/\n)/' | sed '/\[\(3\|4\|5\|6\|7\|8\|9\|1[2-9]\|2[0-9]\)\]/d'
}

function nhc_fs_df_gather_data() {
    local IFS DF_OUT DF_CNT i
    local -a LINES FIELD

    DF_OUT=$($DF_CMD $DF_FLAGS)
    IFS=$'\n'
    LINES=( $DF_OUT )
    IFS=$' \t\n'

    ((DF_CNT=0))
    # Skip first line (column headers).
    for ((i=1; i<${#LINES[*]}; i++)); do
        # Split line on whitespace to create fields.
        FIELD=( ${LINES[$i]} )

        DF_DEV[$DF_CNT]="${FIELD[0]}"
        if [[ ${#FIELD[*]} -eq 1 ]]; then
            ((i++))
            FIELD=( ${FIELD[0]} ${LINES[$i]} )
        fi
        DF_TYPE[$DF_CNT]="${FIELD[1]}"
        DF_SIZE[$DF_CNT]="${FIELD[2]}"
        DF_USED[$DF_CNT]="${FIELD[3]}"
        DF_FREE[$DF_CNT]="${FIELD[4]}"
        DF_PCT[$DF_CNT]="${FIELD[5]%%%}"
        DF_MNTPT[$DF_CNT]="${FIELD[6]}"
        if [[ "${DF_SIZE[$DF_CNT]}" == "-" ]]; then
            DF_SIZE[$DF_CNT]=0
        fi
        if [[ "${DF_USED[$DF_CNT]}" == "-" ]]; then
            DF_USED[$DF_CNT]=0
        fi
        if [[ "${DF_FREE[$DF_CNT]}" == "-" ]]; then
            DF_FREE[$DF_CNT]=0
        fi
        if [[ "${DF_PCT[$DF_CNT]}" == "-" ]]; then
            DF_PCT[$DF_CNT]=0
        fi
        dbg "Got filesystem ${DF_DEV[$DF_CNT]} ${DF_TYPE[$DF_CNT]} ${DF_SIZE[$DF_CNT]} ${DF_USED[$DF_CNT]} ${DF_FREE[$DF_CNT]} ${DF_PCT[$DF_CNT]} ${DF_MNTPT[$DF_CNT]}"
        ((DF_CNT++))
    done
    #set | grep ^DF_ | sed 's/\[/\n        [/g;s/)$/\n)/' | sed '/\[\(3\|4\|7\|8\|9\|1[0-9]\)\]/d'
}

function nhc_fs_dfi_gather_data() {
    local IFS DFI_OUT DFI_CNT i
    local -a LINES FIELD

    DFI_OUT=$($DFI_CMD $DFI_FLAGS)
    IFS=$'\n'
    LINES=( $DFI_OUT )
    IFS=$' \t\n'

    ((DFI_CNT=0))
    # Skip first line (column headers).
    for ((i=1; i<${#LINES[*]}; i++)); do
        # Split line on whitespace to create fields.
        FIELD=( ${LINES[$i]} )

        DFI_DEV[$DFI_CNT]="${FIELD[0]}"
        if [[ ${#FIELD[*]} -eq 1 ]]; then
            ((i++))
            FIELD=( ${FIELD[0]} ${LINES[$i]} )
        fi
        DFI_TYPE[$DFI_CNT]="${FIELD[1]}"
        DFI_INODES[$DFI_CNT]="${FIELD[2]}"
        DFI_IUSED[$DFI_CNT]="${FIELD[3]}"
        DFI_IFREE[$DFI_CNT]="${FIELD[4]}"
        DFI_PCT[$DFI_CNT]="${FIELD[5]%%%}"
        DFI_MNTPT[$DFI_CNT]="${FIELD[6]}"
        if [[ "${DFI_INODES[$DFI_CNT]}" == "-" ]]; then
            DFI_INODES[$DFI_CNT]=0
        fi
        if [[ "${DFI_IUSED[$DFI_CNT]}" == "-" ]]; then
            DFI_IUSED[$DFI_CNT]=0
        fi
        if [[ "${DFI_IFREE[$DFI_CNT]}" == "-" ]]; then
            DFI_IFREE[$DFI_CNT]=0
        fi
        if [[ "${DFI_PCT[$DFI_CNT]}" == "-" ]]; then
            DFI_PCT[$DFI_CNT]=0
        fi
        dbg "Got filesystem ${DFI_DEV[$DFI_CNT]} ${DFI_TYPE[$DFI_CNT]} ${DFI_INODES[$DFI_CNT]} ${DFI_IUSED[$DFI_CNT]} ${DFI_IFREE[$DFI_CNT]} ${DFI_PCT[$DFI_CNT]} ${DFI_MNTPT[$DFI_CNT]}"
        ((DFI_CNT++))
    done
    #set | grep ^DFI_ | sed 's/\[/\n        [/g;s/)$/\n)/' | sed '/\[\(3\|4\|7\|8\|9\|1[0-9]\)\]/d'
}

# Check to make sure a filesystem is mounted.  Includes optional
# checks for source, filesystem type, and a regular expression for
# mount options.
#
# Old syntax:  check_fs_mount fs [ src [ fstype [ options ] ] ]
# New syntax:  check_fs_mount [ -0 ] [ -r ] [ -s src ] [ -t fstype ] [ -o options ] [ -O mount_options ] [ -e cmd ] [ -E cmd ] -f fs
function check_fs_mount() {
    local FS="$1" SRC="$2" TYPE="$3" OPTIONS="$4"
    local REMOUNT=0 NONFATAL=0 MOUNT_OPTS="" ACTION="" FOUND_ACTION=""
    local -a AUTOFS_LIST FS_LIST SRC_LIST TYPE_LIST OPTIONS_LIST
    local i FOUND MSG

    if [[ "${FS##/}" != "$FS" ]]; then
        # First parameter starts with a '/'.  Use the old syntax.
        FS_LIST=( "$FS" )
        [[ -n "$SRC" ]] && SRC_LIST=( "$SRC" )
        [[ -n "$TYPE" ]] && TYPE_LIST=( "$TYPE" )
        [[ -n "$OPTIONS" ]] && OPTIONS_LIST=( "$OPTIONS" )
    else
        OPTIND=1
        while getopts ":0rE:F:O:e:f:o:s:t:" OPTION ; do
            case "$OPTION" in
                0) NONFATAL=1 ;;
                r) REMOUNT=1 ;;
                f) FS_LIST[${#FS_LIST[*]}]="$OPTARG" ;;
                F) AUTOFS_LIST[${#AUTOFS_LIST[*]}]="$OPTARG" ;;
                o) OPTIONS_LIST[${#OPTIONS_LIST[*]}]="$OPTARG" ;;
                O) MOUNT_OPTS="$OPTARG" ;;
                s) SRC_LIST[${#SRC_LIST[*]}]="$OPTARG" ;;
                t) TYPE_LIST[${#TYPE_LIST[*]}]="$OPTARG" ;;
                e) ACTION="$OPTARG" ;;
                E) FOUND_ACTION="$OPTARG" ;;
                -) ((OPTIND++)) ; break ;;
                :) die 1 "$CHECK:  Option -$OPTARG requires an argument." ; return 1 ;;
                \?) die 1 "$CHECK:  Invalid option:  -$OPTARG" ; return 1 ;;
            esac
        done
        shift $((OPTIND-1))
        while [[ -n "$1" ]]; do
            FS_LIST[${#FS_LIST[*]}]="$1"
            shift
        done
    fi

    if [[ ${#FS_DEV[*]} -eq 0 || ${#AUTOFS_LIST[*]} -gt 0 ]]; then
        # Invalidate cache if automount filesystem(s) specified.
        nhc_fs_mounts_gather_data "${AUTOFS_LIST[@]}" || {
            die 1 "$FUNCNAME:  /proc/mounts unreadable"
            return 1
        }
    fi

    for FS in "${FS_LIST[@]}" "${AUTOFS_LIST[@]}" ; do
        FOUND=0
        MSG=""
        # Traverse the mount list.
        for ((i=0 ; i<${#FS_DEV[*]}; i++)); do
            if [[ "${FS_MNTPT[$i]}" != "$FS" ]]; then
                continue
            fi
            if [[ ${#SRC_LIST[*]} > 0 ]]; then
                for SRC in "${SRC_LIST[@]}" ; do
                    if ! mcheck "${FS_DEV[$i]}" "$SRC" ; then
                        MSG="$FUNCNAME:  $FS mounted from ${FS_DEV[$i]}"
                        if [[ "${SRC:0:1}" == '!' ]]; then
                            MSG="$MSG (should NOT match ${SRC:1})"
                        else
                            MSG="$MSG (should match $SRC)"
                        fi
                        break 2
                    fi
                done
            fi
            if [[ ${#TYPE_LIST[*]} > 0 ]]; then
                for TYPE in "${TYPE_LIST[@]}" ; do
                    if ! mcheck "${FS_TYPE[$i]}" "$TYPE" ; then
                        MSG="$FUNCNAME:  $FS has incorrect type ${FS_TYPE[$i]}"
                        if [[ "${TYPE:0:1}" == '!' ]]; then
                            MSG="$MSG (should NOT match ${TYPE:1})"
                        else
                            MSG="$MSG (should match $TYPE)"
                        fi
                        break 2
                    fi
                done
            fi
            if [[ ${#OPTIONS_LIST[*]} > 0 ]]; then
                for OPTIONS in "${OPTIONS_LIST[@]}" ; do
                    if ! mcheck "${FS_OPTS[$i]}" "$OPTIONS" ; then
                        MSG="$FUNCNAME:  $FS mount options incorrect"
                        if [[ "${OPTIONS:0:1}" == '!' ]]; then
                            MSG="$MSG (should NOT match ${OPTIONS:1})"
                        else
                            MSG="$MSG (should match $OPTIONS)"
                        fi
                        break 2
                    fi
                done
            fi
            # If we get here successfully, the filesystem is mounted correctly.
            FOUND=1
            break
        done
        if [[ "$FOUND" == "1" ]]; then
            # The filesystem is mounted correctly.  Move on to the next one.
            if [[ -n "$FOUND_ACTION" ]]; then
                ${SHELL:-/bin/bash} -c "$FOUND_ACTION" &
            fi
            continue
        fi

        # If we get here, the filesystem is either missing (empty $MSG) or mounted incorrectly (with $MSG).
        if [[ -z "$MSG" && ! -d "$FS" ]]; then
            [[ "$SHELL" != ":" ]] && mkdir -p -m 0755 "$FS"
            MSG="$FUNCNAME:  $FS not mounted; directory $FS missing (auto-fixed)"
            if [[ "$REMOUNT" == "1" ]]; then
                ${SHELL:-/bin/bash} -c "$MOUNT_CMD${MOUNT_OPTS:+ -o '$MOUNT_OPTS'} '$FS'" &
            fi
        elif [[ "$REMOUNT" == "1" ]]; then
            if [[ -n "$MSG" ]]; then
                # FIXME:  This won't work if the source or type is what triggered the failure.  Do we care?
                ${SHELL:-/bin/bash} -c "$MOUNT_CMD${MOUNT_OPTS:+ -o 'remount,$MOUNT_OPTS'} '$FS'" &
            else
                ${SHELL:-/bin/bash} -c "$MOUNT_CMD${MOUNT_OPTS:+ -o '$MOUNT_OPTS'} '$FS'" &
            fi
        fi
        if [[ -n "$ACTION" ]]; then
            ${SHELL:-/bin/bash} -c "$ACTION" &
        fi

        if [[ -z "$MSG" ]]; then
            # The filesystem is not mounted at all.
            MSG="$FUNCNAME:  $FS not mounted"
        fi
        if [[ "$NONFATAL" == 1 ]]; then
            log "$MSG (non-fatal)"
        else
            die 1 "$MSG"
            return 1
        fi
    done
    # All tested filesystems were found (or were non-fatal).
    return 0
}

# Some shortcuts that use check_fs_mount()
function check_fs_mount_rw() {
    if [[ "${1##/}" != "$1" ]]; then
        # First parameter starts with a '/'.  Use the old syntax.
        check_fs_mount "$1" "$2" "$3" '/(^|,)rw($|,)/'
    else
        check_fs_mount -o '/(^|,)rw($|,)/' "$@"
    fi
}
function check_fs_mount_ro() {
    if [[ "${1##/}" != "$1" ]]; then
        # First parameter starts with a '/'.  Use the old syntax.
        check_fs_mount "$1" "$2" "$3" '/(^|,)ro($|,)/'
    else
        check_fs_mount -o '/(^|,)ro($|,)/' "$@"
    fi
}

# Check to make sure a filesystem ($1) has between a minimum ($2) and
# a maximum ($3) amount of space (in kB).  Either may be blank.  To
# check for a specific size, pass the same value for both parameters.
function check_fs_size() {
    local FS=$1
    local MIN_SIZE=$2
    local MAX_SIZE=$3
    local FS_SIZE
    local i

    if [[ ${#DF_DEV[*]} -eq 0 ]]; then
        nhc_fs_df_gather_data
    fi

    nhc_common_parse_size "$MIN_SIZE" MIN_SIZE
    nhc_common_parse_size "$MAX_SIZE" MAX_SIZE

    for ((i=0; i < ${#DF_DEV[*]}; i++)); do
        if [[ "${DF_MNTPT[$i]}" != "$FS" ]]; then
            continue
        fi
        if [[ "${DF_SIZE[$i]}" == "0" ]]; then
            syslog "WARNING:  Possible bogus check:  ${FUNCNAME[0]} on pseudofilesystem $FS"
            return 0
        fi
        FS_SIZE=${DF_SIZE[$i]}
        if [[ -n "$MIN_SIZE" && $MIN_SIZE -gt $FS_SIZE ]]; then
            nhc_common_unparse_size $FS_SIZE FS_SIZE
            nhc_common_unparse_size $MIN_SIZE MIN_SIZE
            die 1 "$FUNCNAME:  $FS size $FS_SIZE less than minimum of $MIN_SIZE"
            return 1
        fi
        if [[ -n "$MAX_SIZE" && $MAX_SIZE -lt $FS_SIZE ]]; then
            nhc_common_unparse_size $FS_SIZE FS_SIZE
            nhc_common_unparse_size $MAX_SIZE MAX_SIZE
            die 1 "$FUNCNAME:  $FS size $FS_SIZE exceeds maximum of $MAX_SIZE"
            return 1
        fi
        return 0
    done
    return 0
}

# Check that filesystem ($1) has at least a specified amount ($2) of
# free space.  This may be either a percentage or a size specifier.
function check_fs_free() {
    local FS=$1
    local MIN_FREE=$2
    local FS_FREE FREE_PCT i

    if [[ ${#DF_DEV[*]} -eq 0 ]]; then
        nhc_fs_df_gather_data
    fi

    for ((i=0; i < ${#DF_DEV[*]}; i++)); do
        if [[ "${DF_MNTPT[$i]}" != "$FS" ]]; then
            continue
        fi
        if [[ "${DF_SIZE[$i]}" == "0" ]]; then
            syslog "WARNING:  Possible bogus check:  ${FUNCNAME[0]} on pseudofilesystem $FS"
            return 0
        fi
        if [[ -n "$MIN_FREE" ]]; then
            FREE_PCT=$((100-${DF_PCT[$i]}))
            FS_FREE=${DF_FREE[$i]}
            if [[ "${MIN_FREE/%%}" != "$MIN_FREE" ]]; then
                if [[ $FREE_PCT -lt "${MIN_FREE/%%}" ]]; then
                    nhc_common_unparse_size $FS_FREE FS_FREE
                    die 1 "$FUNCNAME:  $FS has only ${FREE_PCT}% free ($FS_FREE), minimum is $MIN_FREE"
                    return 1
                fi
            else
                nhc_common_parse_size $MIN_FREE MIN_FREE
                if [[ $FS_FREE -lt $MIN_FREE ]]; then
                    nhc_common_unparse_size $MIN_FREE MIN_FREE
                    nhc_common_unparse_size $FS_FREE FS_FREE
                    die 1 "$FUNCNAME:  $FS has only $FS_FREE free, minimum is $MIN_FREE"
                    return 1
                fi
            fi
        fi
        return 0
    done
    return 0
}

# Check that filesystem ($1) has at most a specified amount ($2) of
# used space.  This may be either a percentage or a number of kB.
function check_fs_used() {
    local FS=$1
    local MAX_USED=$2
    local FS_USED i

    if [[ ${#DF_DEV[*]} -eq 0 ]]; then
        nhc_fs_df_gather_data
    fi

    for ((i=0; i < ${#DF_DEV[*]}; i++)); do
        if [[ "${DF_MNTPT[$i]}" != "$FS" ]]; then
            continue
        fi
        if [[ "${DF_SIZE[$i]}" == "0" ]]; then
            syslog "WARNING:  Possible bogus check:  ${FUNCNAME[0]} on pseudofilesystem $FS"
            return 0
        fi
        if [[ -n "$MAX_USED" ]]; then
            FS_USED=${DF_USED[$i]}
            if [[ "${MAX_USED/%%}" != "$MAX_USED" ]]; then
                if [[ ${DF_PCT[$i]} -ge "${MAX_USED/%%}" ]]; then
                    nhc_common_unparse_size $FS_USED FS_USED
                    die 1 "$FUNCNAME:  $FS is ${DF_PCT[$i]}% full ($FS_USED), threshold is $MAX_USED"
                    return 1
                fi
            else
                nhc_common_parse_size $MAX_USED MAX_USED
                if [[ $FS_USED -ge $MAX_USED ]]; then
                    nhc_common_unparse_size $MAX_USED MAX_USED
                    nhc_common_unparse_size $FS_USED FS_USED
                    die 1 "$FUNCNAME:  $FS has $FS_USED used, threshold is $MAX_USED"
                    return 1
                fi
            fi
        fi
        return 0
    done
    return 0
}

# Check all filesystems of type ($1) has at most a specified amount ($2) of
# used space.  This may be either a percentage or a number of kB.
# The function check_fs_used is called for each filesystem.
function check_all_fs_used() {
    local TYPE=$1
    local MAX_USED=$2
    local i

    if [[ ${#DF_DEV[*]} -eq 0 ]]; then
        nhc_fs_df_gather_data
    fi

    for ((i=0; i < ${#DF_DEV[*]}; i++)); do
        if [[ "${DF_TYPE[$i]}" != "$TYPE" ]]; then
            continue
        fi
        check_fs_used "${DF_MNTPT[$i]}" "$MAX_USED"
    done
    return 0
}

# Check to make sure a filesystem ($1) has between a minimum ($2) and
# a maximum ($3) amount of inodes.  Either may be blank.  To check for
# a specific inode count, pass the same value for both parameters.
function check_fs_inodes() {
    local FS=$1
    local MIN_INODES=$2
    local MAX_INODES=$3
    local FS_INODES
    local i

    if [[ ${#DFI_DEV[*]} -eq 0 ]]; then
        nhc_fs_dfi_gather_data
    fi

    nhc_common_parse_count "$MIN_INODES" MIN_INODES
    nhc_common_parse_count "$MAX_INODES" MAX_INODES

    for ((i=0; i < ${#DFI_DEV[*]}; i++)); do
        if [[ "${DFI_MNTPT[$i]}" != "$FS" ]]; then
            continue
        fi
        if [[ "${DFI_INODES[$i]}" == "0" ]]; then
            syslog "WARNING:  Possible bogus check:  ${FUNCNAME[0]} on pseudofilesystem $FS"
            return 0
        fi
        FS_INODES=${DFI_INODES[$i]}
        if [[ -n "$MIN_INODES" && $MIN_INODES -gt $FS_INODES ]]; then
            nhc_common_unparse_count $MIN_INODES MIN_INODES
            die 1 "$FUNCNAME:  $FS inodes $FS_INODES less than minimum of $MIN_INODES"
            return 1
        fi
        if [[ -n "$MAX_INODES" && $MAX_INODES -lt $FS_INODES ]]; then
            nhc_common_unparse_count $MAX_INODES MAX_INODES
            die 1 "$FUNCNAME:  $FS inodes $FS_INODES exceeds maximum of $MAX_INODES"
            return 1
        fi
        return 0
    done
    return 0
}

# Check to make sure all filesystems of type ($1) has between a minimum ($2) and
# a maximum ($3) amount of inodes.  Either may be blank.  To check for
# a specific inode count, pass the same value for both parameters.
function check_all_fs_inodes() {
    local TYPE=$1
    local MIN_INODES=$2
    local MAX_INODES=$3
    local i

    if [[ ${#DF_DEV[*]} -eq 0 ]]; then
        nhc_fs_df_gather_data
    fi

    for ((i=0; i < ${#DFI_DEV[*]}; i++)); do
        if [[ "${DFI_TYPE[$i]}" != "$TYPE" ]]; then
            continue
        fi
        check_fs_inodes "${DF_MNTPT[$i]}" "$MIN_INODES" "$MAX_INODES"
    done
    return 0
}

# Check that filesystem ($1) has at least a specified amount ($2) of
# free inodes.  This may be either a percentage or an exact number.
function check_fs_ifree() {
    local FS=$1
    local MIN_IFREE=$2
    local FS_IFREE IFREE_PCT i

    if [[ ${#DFI_DEV[*]} -eq 0 ]]; then
        nhc_fs_dfi_gather_data
    fi

    for ((i=0; i < ${#DFI_DEV[*]}; i++)); do
        if [[ "${DFI_MNTPT[$i]}" != "$FS" ]]; then
            continue
        fi
        if [[ "${DFI_INODES[$i]}" == "0" ]]; then
            syslog "WARNING:  Possible bogus check:  ${FUNCNAME[0]} on pseudofilesystem $FS"
            return 0
        fi
        if [[ -n "$MIN_IFREE" ]]; then
            IFREE_PCT=$((100-${DFI_PCT[$i]}))
            FS_IFREE=${DFI_IFREE[$i]}
            if [[ "${MIN_IFREE/%%}" != "$MIN_IFREE" ]]; then
                if [[ $IFREE_PCT -lt "${MIN_IFREE/%%}" ]]; then
                    die 1 "$FUNCNAME:  $FS has only ${IFREE_PCT}% of inodes free ($FS_IFREE), minimum is $MIN_IFREE"
                    return 1
                fi
            else
                nhc_common_parse_count $MIN_IFREE MIN_IFREE
                if [[ $FS_IFREE -lt $MIN_IFREE ]]; then
                    nhc_common_unparse_count $MIN_IFREE MIN_IFREE
                    die 1 "$FUNCNAME:  $FS has only $FS_IFREE inodes free, minimum is $MIN_IFREE"
                    return 1
                fi
            fi
        fi
        return 0
    done
    return 0
}

# Check that all filesystems of type ($1) has at least a specified amount ($2) of
# free inodes.  This may be either a percentage or an exact number.
function check_all_fs_ifree() {
    local TYPE=$1
    local MIN_IFREE=$2
    local i

    if [[ ${#DF_DEV[*]} -eq 0 ]]; then
        nhc_fs_df_gather_data
    fi

    for ((i=0; i < ${#DFI_DEV[*]}; i++)); do
        if [[ "${DFI_TYPE[$i]}" != "$TYPE" ]]; then
            continue
        fi
        check_fs_ifree "${DF_MNTPT[$i]}" "$MIN_IFREE"
    done
    return 0
}

# Check that filesystem ($1) has at most a specified amount ($2) of
# used inodes.  This may be either a percentage or an exact number.
function check_fs_iused() {
    local FS=$1
    local MAX_IUSED=$2
    local FS_IUSED i

    if [[ ${#DFI_DEV[*]} -eq 0 ]]; then
        nhc_fs_dfi_gather_data
    fi

    for ((i=0; i < ${#DFI_DEV[*]}; i++)); do
        if [[ "${DFI_MNTPT[$i]}" != "$FS" ]]; then
            continue
        fi
        if [[ "${DFI_INODES[$i]}" == "0" ]]; then
            syslog "WARNING:  Possible bogus check:  ${FUNCNAME[0]} on pseudofilesystem $FS"
            return 0
        fi
        if [[ -n "$MAX_IUSED" ]]; then
            FS_IUSED=${DFI_IUSED[$i]}
            if [[ "${MAX_IUSED/%%}" != "$MAX_IUSED" ]]; then
                if [[ ${DFI_PCT[$i]} -ge "${MAX_IUSED/%%}" ]]; then
                    die 1 "$FUNCNAME:  $FS has ${DFI_PCT[$i]}% of inodes used ($FS_IUSED), threshold is $MAX_IUSED"
                    return 1
                fi
            else
                nhc_common_parse_count $MAX_IUSED MAX_IUSED
                if [[ $FS_IUSED -ge $MAX_IUSED ]]; then
                    nhc_common_unparse_count $MAX_IUSED MAX_IUSED
                    die 1 "$FUNCNAME:  $FS has $FS_IUSED inodes used, threshold is $MAX_IUSED"
                    return 1
                fi
            fi
        fi
        return 0
    done
    return 0
}

# Check that all filesystems of type ($1) has at most a specified amount ($2) of
# used inodes.  This may be either a percentage or an exact number.
function check_all_fs_iused() {
    local TYPE=$1
    local MAX_IUSED=$2
    local i

    if [[ ${#DF_DEV[*]} -eq 0 ]]; then
        nhc_fs_df_gather_data
    fi

    for ((i=0; i < ${#DFI_DEV[*]}; i++)); do
        if [[ "${DFI_TYPE[$i]}" != "$TYPE" ]]; then
            continue
        fi
        check_fs_iused "${DFI_MNTPT[$i]}" "${MAX_IUSED}"
    done
    return 0
}
