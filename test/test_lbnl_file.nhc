# Tests for lbnl_file.nhc

plan $((3+5+5+3+9+6+8+10+22)) "lbnl_file.nhc" && {
    is "`type -t check_file_contents 2>&1`" 'function' 'check_file_contents() loaded properly'
    is "`type -t check_file_test 2>&1`" 'function' 'check_file_test() loaded properly'
    is "`type -t check_file_stat 2>&1`" 'function' 'check_file_stat() loaded properly'

    FILEDATA=$'line1\nline2\nline3\nline4\nline5\nline6\n'

    if ! check_file_contents <(echo "check123") '*123*' ; then
        # There seems to be a bash bug.  It doesn't handle process substitution
        # correctly (i.e., <(...) constructs) when debugging (set -x).  Skip.
        skip $((5+5+3+9+6+8+10))
    else
        check_file_contents <(echo "$FILEDATA") '/line3/'
        is $? 0 'Single regexp match success'
        check_file_contents <(echo "$FILEDATA") 'line1'
        is $? 0 'Single glob match success'
        check_file_contents <(echo "$FILEDATA") '/line1/' '/^line2$/' '/line3/' '/^line4$/' '/line5/' '/^line6$/'
        is $? 0 'Multiple regexp match success'
        check_file_contents <(echo "$FILEDATA") '*line1*' 'line2' '*line3*' 'line4' '*line5*' 'line6'
        is $? 0 'Multiple glob match success'
        check_file_contents <(echo "$FILEDATA") '/line1/' '/^line2$/' '*line3*' 'line4' '/line5$/' '/^line6/'
        is $? 0 'Multiple mixed glob/regexp matches success'

        check_file_contents <(echo "$FILEDATA") '/line7/'
        is $? 1 'Single regexp match failure'
        check_file_contents <(echo "$FILEDATA") 'line7'
        is $? 1 'Single glob match failure'
        check_file_contents <(echo "$FILEDATA") '/line7/' '/^line8$/' '/line9/' '/^line10$/' '/line11/' '/^line12$/'
        is $? 1 'Multiple regexp match failure'
        check_file_contents <(echo "$FILEDATA") '*line7*' 'line8' '*line9*' 'line10' '*line11*' 'line12'
        is $? 1 'Multiple glob match failure'
        check_file_contents <(echo "$FILEDATA") '/line7/' '/^line8$/' '*line9*' 'line10' '/line11$/' '/^line12/'
        is $? 1 'Multiple mixed glob/regexp matches failure'

        check_file_contents <(echo "$FILEDATA") '/line1/' '/^line7$/' '*line9*' 'line11'
        is $? 1 'Multiple matches, 1 success, 3 failures'
        check_file_contents <(echo "$FILEDATA") '/line7/' '/^line2$/' '*line3*' 'line11'
        is $? 1 'Multiple matches, 2 successes, 2 failures'
        check_file_contents <(echo "$FILEDATA") '/line1/' '/^line7$/' '*line3*' 'line4'
        is $? 1 'Multiple matches, 3 successes, 1 failure'

        check_file_contents <(echo "$FILEDATA") '!line7'
        is $? 0 'Single negated glob match success'
        check_file_contents <(echo "$FILEDATA") '!line1'
        is $? 1 'Single negated glob match failure'
        check_file_contents <(echo "$FILEDATA") '!/line7/'
        is $? 0 'Single negated regexp match success'
        check_file_contents <(echo "$FILEDATA") '!/^line1/'
        is $? 1 'Single negated regexp match failure'
        check_file_contents <(echo "$FILEDATA") '!/line7/' '!/line8/' '!/line9/' '!/line0/'
        is $? 0 'Multiple negated matches, 4 successes, 0 failures'
        check_file_contents <(echo "$FILEDATA") '!/line1/' '!/line8/' '!/line9/' '!/line0/'
        is $? 1 'Multiple negated matches, 3 successes, 1 failures'
        check_file_contents <(echo "$FILEDATA") '!/line1/' '!/line2/' '!/line9/' '!/line0/'
        is $? 1 'Multiple negated matches, 2 successes, 2 failures'
        check_file_contents <(echo "$FILEDATA") '!/line1/' '!/line2/' '!/line3/' '!/line0/'
        is $? 1 'Multiple negated matches, 1 successes, 3 failures'
        check_file_contents <(echo "$FILEDATA") '!/line1/' '!/line2/' '!/line3/' '!/line4/'
        is $? 1 'Multiple negated matches, 0 successes, 4 failures'

        check_file_contents <(echo "$FILEDATA") '/line1/' '/line2/' '!/line7/' '!/line8/'
        is $? 0 '4 matches:  2 positive successes, 0 positive failures, 2 negative successes, 0 negative failures'
        check_file_contents <(echo "$FILEDATA") '/line1/' '/line7/' '!/line8/' '!/line2/'
        is $? 1 '4 matches:  1 positive success, 1 positive failure, 1 negative success, 1 negative failure'
        check_file_contents <(echo "$FILEDATA") '/line7/' '/line8/' '!/line1/' '!/line2/'
        is $? 1 '4 matches:  0 positive successes, 2 positive failures, 0 negative successes, 2 negative failures'
        check_file_contents <(echo "$FILEDATA") '/line1/' '/line2/' '/line7/' '!/line8/'
        is $? 1 '4 matches:  2 positive successes, 1 positive failures, 1 negative successes, 0 negative failures'
        check_file_contents <(echo "$FILEDATA") '/line1/' '/line7/' '!/line8/' '!/line9/'
        is $? 1 '4 matches:  1 positive successes, 1 positive failures, 2 negative successes, 0 negative failures'
        check_file_contents <(echo "$FILEDATA") '/line7/' '/line8/' '!/line9/' '!/line0/'
        is $? 1 '4 matches:  0 positive successes, 2 positive failures, 2 negative successes, 0 negative failures'

        FILEDATA=$'$pbsserver master.node\n$pbsclient master.node\n$restricted master.node\n\n$usecp *:/global /global\n$usecp *:/clusterfs /clusterfs\n$usecp *:/var/spool/torque /var/spool/torque\n\n$nospool_dir_list *\n$spool_as_final_name true\n\n$node_check_script /usr/sbin/nhc\n$node_check_interval 5,jobstart,jobend\n$down_on_error 1\n$check_poll_time 60\n\n$logevent 255\n$loglevel 3\n'

    # Some real-world example checks against an actual TORQUE pbs_mom config
        check_file_contents <(echo "$FILEDATA") '/^\$pbsserver master.node$/'
        is $? 0 'Real world example:  Match TORQUE server name against MOM config'
        check_file_contents <(echo "$FILEDATA") '!/^\$pbsserver[[:space:]]*local/'
        is $? 0 'Real world example:  Forbid localhost in MOM config'
        check_file_contents <(echo "$FILEDATA") '/^\$spool_as_final_name (true|True|TRUE|1|yes|Yes|YES)$/'
        is $? 0 'Real world example:  Assert TORQUE configuration setting in MOM config (present)'
        check_file_contents <(echo "$FILEDATA") '/^\$source_login_batch (true|True|TRUE|1|yes|Yes|YES)$/'
        is $? 1 'Real world example:  Assert TORQUE configuration setting in MOM config (missing)'
        check_file_contents <(echo "$FILEDATA") '$logevent *' '$loglevel *' '$check_poll_time *'
        is $? 0 'Real world example:  Match TORQUE variable names against MOM config (present)'
        check_file_contents <(echo "$FILEDATA") '$status_update_time *' '$timeout *' '$usecp *'
        is $? 1 'Real world example:  Match TORQUE variable names against MOM config (missing)'
        check_file_contents <(echo "$FILEDATA") '!source_login_batch *' '$check_poll_time *' '$usecp *'
        is $? 0 'Real world example:  Match TORQUE variable names against MOM config (mixed positive/negative)'
        check_file_contents <(echo "$FILEDATA") '!$pbs*'
        is $? 1 'Real world example:  Match TORQUE configuration (negated, failed)'

    # Check some file attributes of a dynamically-created file
        FILEDATA='stuff'
        FILEDATA_FILE=<(echo "$FILEDATA") check_file_test -a "$FILEDATA_FILE" -e "$FILEDATA_FILE" -r "$FILEDATA_FILE"
        is $? 0 'Bash process substitution file exists and is readable.'
        check_file_test -a -e -r <(echo "$FILEDATA")
        is $? 0 'Bash process substitution file exists and is readable (single file, multiple operators).'
        check_file_test -d <(echo "$FILEDATA")
        is $? 1 'Bash process substitution file is not a directory.'
        check_file_test -f <(echo "$FILEDATA")
        is $? 1 'Bash process substitution file is not a regular file.'
        check_file_test -g <(echo "$FILEDATA")
        is $? 1 'Bash process substitution file is not setgid.'
        check_file_test -k <(echo "$FILEDATA")
        is $? 1 'Bash process substitution file is not sticky.'
        check_file_test -u <(echo "$FILEDATA")
        is $? 1 'Bash process substitution file is not setuid.'
        check_file_test -x <(echo "$FILEDATA")
        is $? 1 'Bash process substitution file is not executable.'
        check_file_test -O <(echo "$FILEDATA")
        is $? 0 'Bash process substitution file is owned by uid $EUID.'
        check_file_test -G <(echo "$FILEDATA")
        is $? 0 'Bash process substitution file is owned by gid of $$.'
    fi

    # Check file stats and compare to expected values
    TEST_STATS=( `/usr/bin/stat -c '%a %b %B %D %g %h %i %m %s %t %T %u %Y %Z' /` )
    check_file_stat -m 0123 "/"
    is $? 1 'stat() exact permissions, unlikely value'
    check_file_stat -m 0${TEST_STATS[0]} "/"
    is $? 0 'stat() exact permissions, correct value'
    check_file_stat -M 0777 "/"
    is $? 1 'stat() matching permissions, unlikely value'
    check_file_stat -M 0100 "/"
    is $? 0 'stat() matching permissions, likely value'
    ### TODO:  Block count and size [1] and [2]
    check_file_stat -d 0xdeadbeef "/"
    is $? 1 'stat() device number, unlikely value'
    check_file_stat -d 0x${TEST_STATS[3]} "/"
    is $? 0 'stat() device number, correct value'
    check_file_stat -g 31415 "/"
    is $? 1 'stat() GID, unlikely value'
    check_file_stat -g ${TEST_STATS[4]} "/"
    is $? 0 'stat() GID, correct value'
    ### TODO:  Link count [5]
    ### TODO:  Inode number [6]
    ### TODO:  Mountpoint [7]
    ### TODO:  Size [8]
    check_file_stat -t 0xff "/"
    is $? 1 'stat() device major number, unlikely value'
    check_file_stat -t ${TEST_STATS[9]} "/"
    is $? 0 'stat() device major number, correct value'
    check_file_stat -T 123 "/"
    is $? 1 'stat() device minor number, unlikely value'
    check_file_stat -T ${TEST_STATS[10]} "/"
    is $? 0 'stat() device minor number, correct value'
    check_file_stat -u 31415 "/"
    is $? 1 'stat() UID, unlikely value'
    check_file_stat -u ${TEST_STATS[11]} "/"
    is $? 0 'stat() UID, correct value'
    check_file_stat -n $((SECONDS-TEST_STATS[12]-86400)) "/"
    is $? 1 'stat() mtime newer than 1 day later'
    check_file_stat -n $((SECONDS-TEST_STATS[12]+86400)) "/"
    is $? 0 'stat() mtime newer than 1 day earlier'
    check_file_stat -o $((SECONDS-TEST_STATS[12]-86400)) "/"
    is $? 0 'stat() mtime newer than 1 day later'
    check_file_stat -o $((SECONDS-TEST_STATS[12]+86400)) "/"
    is $? 1 'stat() mtime newer than 1 day earlier'
    check_file_stat -N $((SECONDS-TEST_STATS[13]-86400)) "/"
    is $? 1 'stat() ctime newer than 1 day later'
    check_file_stat -N $((SECONDS-TEST_STATS[13]+86400)) "/"
    is $? 0 'stat() ctime newer than 1 day earlier'
    check_file_stat -O $((SECONDS-TEST_STATS[13]-86400)) "/"
    is $? 0 'stat() ctime newer than 1 day later'
    check_file_stat -O $((SECONDS-TEST_STATS[13]+86400)) "/"
    is $? 1 'stat() ctime newer than 1 day earlier'

} ; unplan
