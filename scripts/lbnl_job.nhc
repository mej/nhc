# LBNL NHC - TORQUE Job Checks
#
# Michael Jennings <mej@lbl.gov>
# 20 April 2011
#

JOBUSERS=( )
NHC_AUTH_USERS="${NHC_AUTH_USERS:-root nobody}"

# Find all users with jobs currently running on the node.
function nhc_job_find_users() {
    local IFS JOBFILE JOBUSER SQUEUE_OUT LINE PBS_XML
    local -a JOBLIST USERLIST

    dbg "Searching for job files"
    JOBUSERS=( $NHC_AUTH_USERS )
    if [[ "$NHC_RM" == "pbs" ]]; then
        PBS_SERVER_HOME="${PBS_SERVER_HOME:-/var/spool/torque}"
        JOBFILE_PATH="${JOBFILE_PATH:-$PBS_SERVER_HOME/mom_priv/jobs}"
        set +f
        IFS=''
        JOBLIST=( $JOBFILE_PATH/*.JB )
        dbg "Found ${#JOBLIST[*]} job files in $JOBFILE_PATH"
        if [[ ${#JOBLIST[*]} -eq 1 && ! -f "${JOBLIST[0]}" && -d $PWD/jobs ]]; then
            JOBLIST=( $PWD/jobs/*.JB )
            dbg "Found ${#JOBLIST[*]} job files in $PWD/jobs"
        fi
        IFS=$' \t\n'
        set -f
        for JOBFILE in "${JOBLIST[@]}" ; do
            PBS_XML=0
            if [[ ! -f "$JOBFILE" ]]; then
                continue
            fi
            while read LINE ; do
                if [[ $PBS_XML -eq 1 ]]; then
                    JOBUSER="${LINE%%</euser>}"
                    if [[ ${#JOBUSER} -eq ${#LINE} ]]; then
                        continue
                    fi
                    JOBUSER="${JOBUSER##*<euser*>}"
                elif [[ "${LINE##<\?xml}" != "$LINE" ]]; then
                    PBS_XML=1
                    continue
                else
                    JOBUSER=${LINE##PBS_O_LOGNAME=}
                    if [[ ${#JOBUSER} -eq ${#LINE} ]]; then
                        continue
                    fi
                fi
                if [[ "${JOBUSERS[*]//$JOBUSER}" = "${JOBUSERS[*]}" ]]; then
                    JOBUSERS[${#JOBUSERS[*]}]="$JOBUSER"
                fi
                break
            done < "$JOBFILE"
            ### Remove the redirection from the next line if needed for debugging the parsing loop above.
        done 2>/dev/null || :
    elif [[ "$NHC_RM" == "slurm" ]]; then
	SQUEUE_OUT=$(${SQUEUE_CMD:-/usr/bin/squeue} ${SQUEUE_NODE:--w ${HOSTNAME_S}} ${SQUEUE_FMT_ARGS:---noheader -o %u})
        IFS=$'\n'
        USERLIST=( $SQUEUE_OUT )
        IFS=$' \t\n'
        dbg "Found ${#USERLIST[*]} users running jobs on ${HOSTNAME_S}"
        for JOBUSER in "${USERLIST[@]}" ; do
            if [[ "${JOBUSERS[*]//$JOBUSER}" = "${JOBUSERS[*]}" ]]; then
                JOBUSERS[${#JOBUSERS[*]}]="$JOBUSER"
            fi
        done
    elif [[ "$NHC_RM" == "sge" ]]; then
        # FIXME:  SGE not yet supported
        :
    else
        dbg "Unsupported RM detected in ${FUNCNAME}():  \"$NHC_RM\""
    fi
    dbg "Authorized users are:  ${JOBUSERS[*]}"
}

# Check to see if a user ($1) is authorized to have processes on this node.
# Returns true (0) if user is authorized, false (non-zero) otherwise.
function nhc_job_user_auth() {
    local JOBUSER="$1" JOBUSER_UID="$2"
    local i

    # Initialize the data array if needed.
    if [[ ${#JOBUSERS[*]} -eq 0 ]]; then
        nhc_job_find_users
    fi

    # Populate UID if missing.
    if [[ -z "$JOBUSER_UID" ]]; then
        nhc_common_get_uid "$JOBUSER" JOBUSER_UID
    fi

    # Check if UID is in system range.
    if [[ -n "$JOBUSER_UID" && $JOBUSER_UID -le $MAX_SYS_UID ]]; then
        dbg "User $JOBUSER is authorized."
        return 0
    fi

    # Make sure the user specified appears in the array of authorized users.
    for ((i=0; i < ${#JOBUSERS[*]}; i++)); do
        if [[ "${JOBUSERS[$i]}" == "$JOBUSER" ]]; then
            dbg "User $JOBUSER is authorized."
            return 0
        fi
    done

    dbg "User $JOBUSER ($JOBUSER_UID > $MAX_SYS_UID) is NOT authorized."
    return 1
}
